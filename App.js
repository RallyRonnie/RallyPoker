// Generated by CoffeeScript 1.6.2
Ext.define('RallyPokerApp', {
  extend: 'Rally.app.App',
  id: 'RallyPokerApp',
  componentCls: 'app',
  models: [],
  layout: 'card',
  items: [
    {
      id: 'storypicker',
      layout: {
        reserveScrollbar: true
      },
      autoScroll: true,
      dockedItems: [
        {
          items: [
            {
              id: 'iterationfilter',
              xtype: 'toolbar'
            }
          ]
        }
      ]
    }, {
      id: 'storyview',
      layout: {
        reserveScrollbar: true
      },
      autoScroll: true,
      dockedItems: [
        {
          items: [
            {
              id: 'storyheader',
              xtype: 'toolbar',
              items: [
                {
                  id: 'storyback',
                  xtype: 'button',
                  html: 'Back'
                }, {
                  id: 'storytitle',
                  xtype: 'component'
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  Base62: (function() {
    var chars;

    chars = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
    return {
      encode: function(i) {
        var s;

        if (i === 0) {
          return;
        }
        s = '';
        while (i > 0) {
          s = chars[i % 62] + s;
          i = Math.floor(i / 62);
        }
        return s;
      },
      decode: function(a, b, c, d) {
        for (
          b = c = (a === (/\W|_|^$/.test(a += "") || a)) - 1;
          d = a.charCodeAt(c++);
        ) {
          b = b * 62 + d - [, 48, 29, 87][d >> 5];
        }
        return b;
      }
    };
  })(),
  PokerDeck: (function() {
    var cards, _decipher, _encipher;

    cards = ['?', '0', '&#189;', '1', '2', '3', '5', '8', '13', '20', '40', '100'];
    _encipher = function(key, shift) {
      return (key + shift) % cards.length;
    };
    _decipher = function(msg, shift) {
      if ((msg = (msg - shift) % cards.length) < 0) {
        return cards.length + msg;
      } else {
        return msg;
      }
    };
    return {
      listCards: function() {
        var label, position, _i, _len, _results;

        _results = [];
        for (position = _i = 0, _len = cards.length; _i < _len; position = ++_i) {
          label = cards[position];
          _results.push({
            key: position,
            value: label
          });
        }
        return _results;
      },
      pickCard: function(key, uid) {
        return _encipher(key, uid % 10);
      },
      revealCard: function(msg, uid) {
        return cards[_decipher(msg, uid % 10)];
      }
    };
  })(),
  PokerMessage: (function() {
    var env, esc, msg, pkg, sep;

    esc = function(str) {
      return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
    };
    sep = ['/', '&'];
    msg = new RegExp("^" + sep[0] + "\\w+(?:" + sep[1] + "\\w+)+$");
    env = ['[[', ']]'];
    pkg = new RegExp(esc(env[0]) + "(" + sep[0] + ".+?)" + esc(env[1]));
    return {
      compile: function(M) {
        var a, fn, s;

        fn = arguments[1] || function(x) {
          return x;
        };
        a = Ext.clone(M);
        a[0] = sep[0] + fn(M[0]);
        s = a.length === 1 ? a[0] : a.reduce(function(p, c, i) {
          return p + sep[1] + fn(c);
        });
        return env[0] + s + env[1];
      },
      extract: function(s) {
        var a;

        if (s && (a = s.match(pkg))) {
          return a.pop();
        } else {
          return false;
        }
      },
      parse: function(s) {
        var M, i, _i, _len, _results;

        if (!msg.test(s)) {
          return false;
        }
        M = s.slice(1).split(sep[1]);
        if (arguments[1] == null) {
          return M;
        } else {
          _results = [];
          for (_i = 0, _len = M.length; _i < _len; _i += 1) {
            i = M[_i];
            _results.push(arguments[1](i));
          }
          return _results;
        }
      }
    };
  })(),
  launch: function() {
    var projectID,
      _this = this;

    this.Account = this.getContext().getUser();
    this.Account.ref = '/user/' + this.Account.ObjectID;
    this.Account.isTeamMember = false;
    projectID = this.getContext().getProject().ObjectID;
    Ext.create('Rally.data.WsapiDataStore', {
      model: 'Project',
      fetch: ['TeamMembers'],
      filters: [
        {
          property: 'ObjectID',
          value: projectID
        }
      ],
      autoLoad: true,
      listeners: {
        scope: this,
        load: function(store, result, success) {
          var M, _i, _len, _ref;

          if (!success) {
            return;
          }
          _ref = result[0].data.TeamMembers;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            M = _ref[_i];
            if (M._ref === this.Account.ref) {
              this.Account.isTeamMember = true;
              return;
            }
          }
        }
      }
    });
    this.IterationsStore = Ext.create('Rally.data.WsapiDataStore', {
      model: 'Iteration',
      fetch: ['Name'],
      sorters: [
        {
          property: 'Name',
          direction: 'DESC'
        }
      ],
      autoLoad: true,
      listeners: {
        load: function(store, result, success) {
          if (success) {
            _this.IterationFilter.setValue('Deprecated');
          }
        }
      }
    });
    this.IterationFilter = Ext.create('Ext.form.ComboBox', {
      fieldLabel: 'Iteration',
      store: this.IterationsStore,
      queryMode: 'local',
      displayField: 'Name',
      valueField: 'Name',
      listeners: {
        change: function(field, newValue, oldValue, options) {
          _this.StoriesStore.load({
            filters: [
              {
                property: 'Iteration.Name',
                value: newValue
              }
            ]
          });
        }
      }
    });
    this.down('#iterationfilter').add(this.IterationFilter);
    this.StoriesStore = Ext.create('Rally.data.WsapiDataStore', {
      model: 'User Story',
      fetch: ['ObjectID', 'FormattedID', 'Name'],
      sorters: [
        {
          property: 'Name',
          direction: 'DESC'
        }
      ]
    });
    this.StoryList = Ext.create('Ext.view.View', {
      store: this.StoriesStore,
      tpl: new Ext.XTemplate('<tpl for=".">', '<div style="padding: .5em 0;" class="storylistitem" data-id="{ObjectID}">', '<span class="storylistitem-id">{FormattedID}: {Name}</span>', '</div>', '</tpl>'),
      itemSelector: 'div.storylistitem',
      emptyText: 'No stories available',
      listeners: {
        click: {
          element: 'el',
          fn: function(e, t) {
            var StoryListItem, storyListItemId, storyListItemName;

            StoryListItem = Ext.get(Ext.get(t).findParent('.storylistitem'));
            storyListItemName = StoryListItem.child('.storylistitem-id').getHTML();
            Ext.get('storytitle').update(storyListItemName);
            storyListItemId = StoryListItem.getAttribute('data-id');
            _this.CurrentStory.load({
              filters: [
                {
                  property: 'ObjectID',
                  value: storyListItemId
                }
              ]
            });
            _this.DiscussionsStore.load({
              filters: [
                {
                  property: 'Artifact.ObjectID',
                  value: storyListItemId
                }
              ]
            });
            _this.getLayout().setActiveItem('storyview');
          }
        }
      }
    });
    this.down('#storypicker').add(this.StoryList);
    Ext.getCmp('storyback').on('click', function() {
      _this.getLayout().setActiveItem('storypicker');
      _this.StoryPage.update({});
      _this.DiscussionThread.update({});
      _this.DiscussionThread.tpl.showEstimates = false;
    });
    this.CurrentStory = Ext.create('Rally.data.WsapiDataStore', {
      model: 'userstory',
      limit: 1,
      fetch: ['ObjectID', 'LastUpdateDate', 'Description', 'Attachments', 'Notes', 'Discussion']
    });
    this.StoryPage = Ext.create('Ext.view.View', {
      store: this.CurrentStory,
      tpl: new Ext.XTemplate('<tpl for=".">', '<div class="storydetail" data-id="{ObjectID}">', '<small class="storydetail-date">Last Updated: {[this.prettyDate(values.LastUpdateDate)]}</small>', '<div class="storydetail-description">', '{Description}', '</div>', '<div class="storydetail-attachments">', '<h3>Attachments<h3>{Attachments}', '</div>', '<div class="storydetail-notes">', '<h3>Notes<h3>{Notes}', '</div>', '</div>', '</tpl>', {
        prettyDate: function(date) {
          var day_diff, diff;

          diff = ((new Date()).getTime() - date.getTime()) / 1000;
          day_diff = Math.floor(diff / 86400);
          if (isNaN(day_diff) || day_diff < 0 || day_diff >= 31) {
            return;
          }
          return day_diff === 0 && (diff < 60 && "just now" || diff < 120 && "1 minute ago" || diff < 3600 && Math.floor(diff / 60) + " minutes ago" || diff < 7200 && "1 hour ago" || diff < 86400 && Math.floor(diff / 3600) + " hours ago") || day_diff === 1 && "Yesterday" || day_diff < 7 && day_diff + " days ago" || day_diff < 31 && Math.ceil(day_diff / 7) + " weeks ago";
        }
      }),
      itemSelector: 'div.storydetail'
    });
    this.down('#storyview').add(this.StoryPage);
    this.DiscussionsStore = Ext.create('Rally.data.WsapiDataStore', {
      model: 'conversationpost',
      fetch: ['User', 'CreationDate', 'Text', 'Message']
    });
    this.DiscussionThread = Ext.create('Ext.view.View', {
      store: this.DiscussionsStore,
      tpl: new Ext.XTemplate('<tpl if="xindex == xcount"><tpl for=".">', '<tpl if="this.messageThread.length">', '<div class="messagethread">', '<h3>Who\'s Voted</h3>', '<ul class="messageitems">', '<tpl if="this.isTeamMember">', '<tpl for="whoVoted">', '<li>', '<span class="pokercard pokercard-facedown"></span>', '{name} at {when}', '</li>', '</tpl>', '</ul>', '<tpl else>', '<tpl if="this.showEstimates">', '<tpl for="whoVoted">', '<li>', '<span class="pokercard pokercard-faceup">{[this.revealCard(values.vote, values.user)]}</span>', ' by {name} at {when}', '</li>', '</tpl>', '<tpl else>', '<tpl for="whoVoted">', '<li>', '<span class="pokercard pokercard-facedown"></span>', '{name} at {when}', '</li>', '</tpl>', '</tpl>', '</ul>', '<span class="messagethread-reveal">Reveal</span>', '<span class="messagethread-reload">Reload</span>', '</tpl>', '</div>', '</tpl>', '<div class="estimateselector"></div>', '<tpl if="this.discussionThread.length">', '<div class="discussionthread">', '<h3>Discussion</h3>', '<tpl for="discussionThread">', '<div class="discussionitem">', '<small class="discussionitem-id">{name}: {when}</small>', '<p class="discussionitem-text">{text}</p>', '</div>', '</tpl>', '</div>', '</tpl>', '</tpl></tpl>', {
        isTeamMember: _this.Account.isTeamMember,
        showEstimates: false,
        revealCard: _this.PokerDeck.revealCard,
        myVote: false,
        whoVoted: {},
        messageThread: [],
        discussionThread: []
      }),
      itemSelector: 'div.discussionitem',
      prepareData: function(data, index, record) {
        var timestamp = data.CreationDate.getTime();
        var A, D, V, k, message, _i, _len, _ref, _ref1;

        if (message = _this.PokerMessage.extract(data.Text)) {
          if ((this.tpl.whoVoted[data.User._ref] == null) || timestamp > this.tpl.whoVoted[data.User._ref].when) {
            this.tpl.whoVoted[data.User._ref] = {
              post: data.ObjectID,
              when: timestamp,
              user: data.User._ref,
              name: data.User._refObjectName,
              vote: (_this.PokerMessage.parse(message, _this.Base62.decode)).pop()
            };
          }
        } else {
          this.tpl.discussionThread.push({
            when: timestamp,
            name: data.User._refObjectName,
            text: data.Text
          });
        }
        if (index === this.store.data.length - 1) {
          var whenVoted = [], voteMap = {};
          data.whoVoted = [];
          _ref = this.tpl.whoVoted;
          for (k in _ref) {
            V = _ref[k];
            if (k === _this.Account.ref) {
              this.tpl.myVote = V;
            }
            if (this.tpl.whoVoted.hasOwnProperty(k)) {
              this.tpl.messageThread.push(V.when);
              voteMap[V.when] = V;
            }
          }
          this.tpl.messageThread.sort();
          _ref1 = this.tpl.messageThread;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            k = _ref1[_i];
            D = new Date(voteMap[k].when);
            voteMap[k].when = Ext.util.Format.date(D, 'g:iA') + ' on ' + Ext.util.Format.date(D, 'm-d-Y');
            A = /user\/(\d+)/.exec(voteMap[k].user);
            voteMap[k].user = A[1];
            data.whoVoted.push(voteMap[k]);
          }
          data.discussionThread = this.tpl.discussionThread;
        }
        return data;
      },
      listeners: {
        scope: this,
        refresh: function(view) {
          var StoryEstimator;

          if (this.Account.isTeamMember) {
            StoryEstimator = Ext.create('EstimateSelector', {
              ParentApp: this,
              renderTo: Ext.query('.estimateselector')[0]
            });
            StoryEstimator.update(view.tpl.myVote);
          } else {
            Ext.get(view.el.query('.messagethread-reveal')).on('click', view._onReveal, this);
            Ext.get(view.el.query('.messagethread-reload')).on('click', view._onReload, this);
          }
          view.tpl.myVote = false;
          view.tpl.whoVoted = {};
          view.tpl.messageThread = [];
          view.tpl.discussionThread = [];
        }
      },
      _onReveal: function(e, t) {
        this.DiscussionThread.tpl.showEstimates = true;
        this.DiscussionsStore.reload();
      },
      _onReload: function(e, t) {
        this.DiscussionsStore.reload();
      }
    });
    this.down('#storyview').add(this.DiscussionThread);
  }
});

Ext.define('EstimateSelector', {
  extend: 'Ext.Container',
  update: function(data) {
    var li, _i, _len, _ref;

    if (data.vote) {
      data.vote = this.ParentApp.PokerDeck.revealCard(data.vote, data.user);
      this.callParent([data]);
      Ext.get(this.el.query('.storypointer-reselect')).on('click', this._onReselect, this);
    } else {
      data = {
        deck: this.ParentApp.PokerDeck.listCards()
      };
      this.callParent([data]);
      _ref = this.el.query('.pokercard');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        li = _ref[_i];
        Ext.get(li).on('click', this._onCardClick, this);
      }
    }
  },
  tpl: new Ext.XTemplate('<tpl for=".">', '<tpl if="vote">', '<h3>Your estimate: {vote}</h3>', '<span class="storypointer-reselect" data-postid="{post}">Select a new estimate</span>', '<tpl else>', '<h3>Select an estimate</h3>', '<ul class="storypointer">', '<tpl for="deck">', '<li class="pokercard pokercard-faceup" data-cardid="{key}">', '<span>{value}</span>', '</li>', '</tpl>', '</ul>', '</tpl>', '</tpl>'),
  _onCardClick: function(e, t) {
    var Message, Record, key, message,
      _this = this;

    key = Number(Ext.get(t).findParent('.pokercard').getAttribute('data-cardid'));
    Message = [new Date().getTime(), this.ParentApp.Account.ObjectID, this.ParentApp.PokerDeck.pickCard(key, this.ParentApp.Account.ObjectID)];
    message = this.ParentApp.PokerMessage.compile(Message, this.ParentApp.Base62.encode);
    Record = Ext.create(this.ParentApp.models['conversationpost']);
    Record.set({
      Artifact: this.ParentApp.CurrentStory.data.keys[0],
      User: this.ParentApp.Account.ObjectID,
      Text: 'Pointed this story with RallyPoker. <span style="display:none">' + encodeURIComponent(message) + '<\/span>'
    });
    Record.save({
      success: function(b, o) {
        _this.ParentApp.DiscussionsStore.reload();
      },
      failure: function(b, o) {
        alert('Error submitting your estimate. Please try again.');
      }
    });
  },
  _onReselect: function(e, t) {
    Ext.create('Rally.data.WsapiDataStore', {
      model: 'conversationpost',
      autoLoad: true,
      filters: [
        {
          property: 'ObjectID',
          value: t.getAttribute('data-postid')
        }
      ],
      limit: 1,
      listeners: {
        scope: this,
        load: this._onEstimateStoreLoad
      }
    });
  },
  _onEstimateStoreLoad: function(store, result, success) {
    var _this = this;

    if (success) {
      store.data.items[0].destroy({
        success: function() {
          _this.ParentApp.DiscussionsStore.reload();
        },
        failure: function() {
          alert('Error deleting your estimate. Please try again.');
        }
      });
    }
  }
});
